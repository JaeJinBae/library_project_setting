-- library
drop database if exists library;
-- library
CREATE database library;

use library;

-- 도서
CREATE TABLE book (
   book_code        VARCHAR(13) NOT NULL,
   book_name        VARCHAR(50) NULL,    
   author           VARCHAR(50) NULL,    
   public_name      VARCHAR(50) NULL,     
   price            INT(11)     NULL,     
   amount           INT(11)     NULL,     
   all_rentel_count INT(11)    default 0     
);


-- 도서
ALTER TABLE book ADD CONSTRAINT
   PRIMARY KEY (
         book_code
      );

-- 도서대분류
CREATE TABLE book_big_group (
   big_group           VARCHAR(10) NOT NULL, 
   book_big_group_name VARCHAR(20) NULL
   );


-- 도서대분류
ALTER TABLE book_big_group
   ADD CONSTRAINT
      PRIMARY KEY (
         big_group 
      );

-- 도서중분류
CREATE TABLE book_middle_group (
   middle_group           VARCHAR(10) NOT NULL, 
   big_group              VARCHAR(10) NULL, 
   book_middle_group_name VARCHAR(100) NULL
);


-- 히스토리
CREATE TABLE history (
   book_code     VARCHAR(13) NULL, 
   user_id       VARCHAR(50) NULL, 
   rentalday     DATE        NULL, 
   realreturnday DATE        NULL 
);


-- FK_rentalbook_TO_history
CREATE INDEX FK_rentalbook_TO_history
   ON library.history(
      rentalday 
   );

-- post
CREATE TABLE library.post (
   zipcode   CHAR(5)     NULL, 
   sido      VARCHAR(20) NULL, 
   sigungu   VARCHAR(20) NULL,
   doro      VARCHAR(80) NULL,
   building1 INT(5)      NULL, 
   building2 INT(5)      NULL
);

-- idx_post_doro
CREATE INDEX idx_post_doro
   ON library.post(
      doro 
   );

-- idx_post_sido
CREATE INDEX idx_post_sido
   ON library.post(
      sido
   );

-- idx_post_sigungu
CREATE INDEX idx_post_sigungu
   ON library.post(
      sigungu 
   );

-- 출판사
CREATE TABLE publisher (
   public_code VARCHAR(50) NOT NULL, 
   public_name VARCHAR(50) NULL    
);


-- 출판사
ALTER TABLE publisher
   ADD CONSTRAINT
      PRIMARY KEY (
         public_code
      );

-- 대여현황
CREATE TABLE rentalbook (
   rentalday DATE        NULL, 
   book_code VARCHAR(13) NULL,
   user_id   VARCHAR(50) NULL, 
   returnday DATE        NULL
);


-- 유저등급
CREATE TABLE userrank (
   rank_code INT(11)     NOT NULL,
   rank_name VARCHAR(50) NULL
);


-- 유저등급
ALTER TABLE userrank
   ADD CONSTRAINT
      PRIMARY KEY (
         rank_code
      );

-- 유저
CREATE TABLE users (
   user_id    VARCHAR(50) NOT NULL, 
   user_name  VARCHAR(50) NULL, 
   user_pw    VARCHAR(50) NULL,
   user_addr  VARCHAR(50) NULL, 
   user_tel   VARCHAR(50) NULL, 
   user_email VARCHAR(50) NULL, 
   delay_day  INT(11)     NULL, 
   rank_code  INT(11)     NULL, 
   user_leave VARCHAR(50) NULL  
);

-- 유저
ALTER TABLE users
   ADD CONSTRAINT
      PRIMARY KEY (
         user_id
      );

-- 도서
ALTER TABLE book
   ADD CONSTRAINT FK_publisher_TO_book
      FOREIGN KEY (
         public_name
      )
      REFERENCES publisher (
         public_code
      ),
   ADD INDEX FK_publisher_TO_book (
      public_name
   );

-- 도서중분류
ALTER TABLE book_middle_group
   ADD CONSTRAINT FK_book_big_group_TO_book_middle_group 
      FOREIGN KEY (
         big_group
      )
      REFERENCES book_big_group (
         big_group
      ),
   ADD INDEX FK_book_big_group_TO_book_middle_group (
      big_group
   );
-- 대여현황
ALTER TABLE rentalbook
   ADD CONSTRAINT FK_book_TO_rentalbook
      FOREIGN KEY (
         book_code
      )
      REFERENCES book (
         book_code
      ),
   ADD INDEX FK_book_TO_rentalbook (
      book_code
   );

-- 대여현황
ALTER TABLE rentalbook
   ADD CONSTRAINT FK_users_TO_rentalbook
      FOREIGN KEY (
         user_id
      )
      REFERENCES users (
         user_id
      ),
   ADD INDEX FK_users_TO_rentalbook (
      user_id
   );

-- 유저
ALTER TABLE users
   ADD CONSTRAINT FK_userrank_TO_users 
      FOREIGN KEY (
         rank_code
      )
      REFERENCES userrank (
         rank_code
      ),
   ADD INDEX FK_userrank_TO_users (
      rank_code
   );




-- 대여현황테이블뷰
create view rental_live as
select b.book_Code,b.book_name,u.user_id,u.user_name,author,public_name,price,rentalDay,returnDay
from book b ,rentalBook r, users u
where b.book_code = r.book_code and r.user_id = u.user_id;

-- 히스토리 뷰
create view history_total as
select b.book_Code,b.book_name,u.user_id,u.user_name,author,public_name,price,rentalDay,realreturnday
from book b ,history h, users u
where b.book_code = h.book_code and h.user_id = u.user_id;
-- 도서 대분류
-- 분류테이블 inset
insert into book_big_group values
('A0','총류'),
('B0','철학'),
('C0','종교'),
('D0','사회과학'),
('E0','자연과학'),
('F0','기술과학'),
('G0','예술'),
('H0','언어'),
('I0','문학'),
('J0','역사');
insert into userrank values('1','관리자'),('2','회원'),('3','블랙리스트');
insert into publisher values
('0001','한국경제신문i'),
('0002','문학동네'),
('0003','이지퍼블리싱'),
('0004','한빛미디어'),
('0005','교학사');
DROP TABLE IF EXISTS library.reading RESTRICT;

create table if not exists reading(
	book_name varchar(50),
	author varchar(50),
	public_name varchar(50)
);
